#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2024 Jonah Br√ºchert <jbb@kaidan.im>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

import json
import metadata
import sys
import transitland

from ruamel.yaml import YAML
from typing import Any
from pathlib import Path
from utils import eprint


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("First argument must be one of import, full")
        sys.exit(1)

    flavour = sys.argv[1]
    feed = sys.argv[2] if len(sys.argv) > 2 else ""

    feed_dir = Path("feeds/")

    atlas = transitland.Atlas.load(Path("transitland-atlas/"))

    gtfs_feeds: list[dict] = []
    gtfsrt_feeds: list[dict] = []

    with open("motis/config.yml") as f:
        yaml = YAML(typ="rt")

        config = yaml.load(f)
        config.yaml_set_comment_before_after_key(
            "server",
            before="This file is automatically generated by ./src/generate-motis-config.py from motis/config.yml",
        )

        if flavour == "import":
            config.pop("tiles")

        config["timetable"].yaml_set_comment_before_after_key(
            "datasets", before="Modified by generate-motis-config.py"
        )
        config["timetable"]["datasets"] = {}

        if feed == "":
            glob = "*.json"
        else:
            glob = f"{feed}.json"

        for feed in sorted(feed_dir.glob(glob)):
            with open(feed, "r") as f:
                parsed = json.load(f)
                region = metadata.Region(parsed)

                metadata_filename = feed.name
                region_name = metadata_filename[: metadata_filename.rfind(".")]

                for source in region.sources:
                    schedule_name = f"{region_name}-{source.name}"

                    if source.skip:
                        continue

                    match source:
                        case metadata.TransitlandSource():
                            source = atlas.source_by_id(source)
                            if not source:
                                continue

                    match source.spec:
                        case "gtfs":
                            schedule_file = \
                                f"{region_name}_{source.name}.gtfs.zip"
                            name = f"{region_name}-{source.name}"
                            config["timetable"]["datasets"][name] = \
                                {"path": schedule_file}

                        case "gtfs-rt" if isinstance(source, metadata.UrlSource):
                            name = f"{region_name}-{source.name}"
                            if name not in config["timetable"]["datasets"]:
                                eprint(
                                    "Error: The name of a realtime (gtfs-rt) "
                                    + "feed needs to match the name of its "
                                    + "static base feed defined before the "
                                    + "realtime feed. Found nothing "
                                    + "belonging to",
                                    source.name,
                                )
                                sys.exit(1)

                            if "rt" not in config["timetable"]["datasets"][name]:
                                config["timetable"]["datasets"][name]["rt"] = []

                            rt_feed: dict[str, Any] = {
                                "url": source.url
                            }

                            if source.headers:
                                rt_feed["headers"] = source.headers

                            config["timetable"]["datasets"][name]["rt"] \
                                .append(rt_feed)

        with open("out/config.yml", "w") as fo:
            yaml.dump(config, fo)
