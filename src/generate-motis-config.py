#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2024 Jonah Br√ºchert <jbb@kaidan.im>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

import argparse
import json
import metadata
import sys
import transitland
import mobilitydatabase

from ruamel.yaml import YAML
from typing import Any
from pathlib import Path
from utils import eprint


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Transitous MOTIS configuration generator.')
    parser.add_argument('--import-only', action='store_true', help='Generate configuration for importing only.')
    parser.add_argument('regions', type=str, help='Only generate configuration for the given region(s) (leave empty for all regions, globs are supported)', nargs="*")
    arguments = parser.parse_args()

    feed_dir = Path("feeds/")

    atlas = transitland.Atlas.load(Path("transitland-atlas/"))
    mdb = mobilitydatabase.Database.load()

    gtfs_feeds: list[dict] = []
    gtfsrt_feeds: list[dict] = []

    with open("motis/config.yml") as f:
        yaml = YAML(typ="rt")

        config = yaml.load(f)
        config.yaml_set_comment_before_after_key(
            "server",
            before="This file is automatically generated by ./src/generate-motis-config.py from motis/config.yml",
        )

        if arguments.import_only:
            config.pop("tiles")

        config["timetable"].yaml_set_comment_before_after_key(
            "datasets", before="Modified by generate-motis-config.py"
        )
        config["timetable"]["datasets"] = {}
        config["gbfs"]["feeds"] = {}

        # TODO backward compatibility, remove this in a few months
        while "full" in arguments.regions:
            print("Ignoring legacy option 'full', this is the default now.")
            arguments.regions.remove("full")

        feeds = []
        if len(arguments.regions) == 0:
            feeds = feed_dir.glob("*.json")
        else:
            for region in arguments.regions:
                feeds += feed_dir.glob(f"{region}.json")

        for feed in sorted(feeds):
            with open(feed, "r") as f:
                parsed = json.load(f)
                region = metadata.Region(parsed)

                metadata_filename = feed.name
                region_name = metadata_filename[: metadata_filename.rfind(".")]

                for source in region.sources:
                    schedule_name = f"{region_name}-{source.name}"

                    if source.skip:
                        continue

                    match source:
                        case metadata.TransitlandSource():
                            resolved_source = atlas.source_by_id(source)
                            if not resolved_source:
                                eprint("Error: Could not resolve", source.transitland_atlas_id)
                                sys.exit(1)
                            source = resolved_source
                        case metadata.MobilityDatabaseSource():
                            resolved_source = mdb.source_by_id(source)
                            if not resolved_source:
                                eprint("Error: Could not resolve", source.mdb_id)
                                sys.exit(1)
                            source = resolved_source

                    match source.spec:
                        case source.spec if source.spec in ["gtfs", "gtfs-flex"]:
                            schedule_file = \
                                f"{region_name}_{source.name}.gtfs.zip"
                            name = f"{region_name}-{source.name}"
                            config["timetable"]["datasets"][name] = \
                                {
                                    "path": schedule_file,
                                    "extend_calendar": source.extend_calendar
                                }

                        case "gtfs-rt" if isinstance(source, metadata.UrlSource):
                            name = f"{region_name}-{source.name}"
                            if name not in config["timetable"]["datasets"]:
                                eprint(
                                    "Error: The name of a realtime (gtfs-rt) "
                                    + "feed needs to match the name of its "
                                    + "static base feed defined before the "
                                    + "realtime feed. Found nothing "
                                    + "belonging to",
                                    source.name,
                                )
                                sys.exit(1)

                            if "rt" not in config["timetable"]["datasets"][name]:
                                config["timetable"]["datasets"][name]["rt"] = []

                            rt_feed: dict[str, Any] = {
                                "url": source.url
                            }

                            if source.headers:
                                rt_feed["headers"] = source.headers

                            config["timetable"]["datasets"][name]["rt"] \
                                .append(rt_feed)

                        case "gbfs" if isinstance(source, metadata.UrlSource):
                            name = f"{region_name}-{source.name}"
                            config["gbfs"]["feeds"][name] = {"url": source.url}
                            if source.headers:
                                config["gbfs"]["feeds"][name]["headers"] = source.headers

        with open("out/config.yml", "w") as fo:
            yaml.dump(config, fo)
